//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace webSIte.TrackServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SongClass", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class SongClass : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContributorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateReleasedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int albumIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string albumNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string artistNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string genreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string genreSubcategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int isSongActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string songNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contributors {
            get {
                return this.ContributorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContributorsField, value) != true)) {
                    this.ContributorsField = value;
                    this.RaisePropertyChanged("Contributors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateReleased {
            get {
                return this.DateReleasedField;
            }
            set {
                if ((object.ReferenceEquals(this.DateReleasedField, value) != true)) {
                    this.DateReleasedField = value;
                    this.RaisePropertyChanged("DateReleased");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int albumId {
            get {
                return this.albumIdField;
            }
            set {
                if ((this.albumIdField.Equals(value) != true)) {
                    this.albumIdField = value;
                    this.RaisePropertyChanged("albumId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string albumName {
            get {
                return this.albumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.albumNameField, value) != true)) {
                    this.albumNameField = value;
                    this.RaisePropertyChanged("albumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string artistName {
            get {
                return this.artistNameField;
            }
            set {
                if ((object.ReferenceEquals(this.artistNameField, value) != true)) {
                    this.artistNameField = value;
                    this.RaisePropertyChanged("artistName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string genre {
            get {
                return this.genreField;
            }
            set {
                if ((object.ReferenceEquals(this.genreField, value) != true)) {
                    this.genreField = value;
                    this.RaisePropertyChanged("genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string genreSubcategory {
            get {
                return this.genreSubcategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.genreSubcategoryField, value) != true)) {
                    this.genreSubcategoryField = value;
                    this.RaisePropertyChanged("genreSubcategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int isSongActive {
            get {
                return this.isSongActiveField;
            }
            set {
                if ((this.isSongActiveField.Equals(value) != true)) {
                    this.isSongActiveField = value;
                    this.RaisePropertyChanged("isSongActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string songName {
            get {
                return this.songNameField;
            }
            set {
                if ((object.ReferenceEquals(this.songNameField, value) != true)) {
                    this.songNameField = value;
                    this.RaisePropertyChanged("songName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrackServiceReference.ISongsFunctionality")]
    public interface ISongsFunctionality {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/addSong", ReplyAction="http://tempuri.org/ISongsFunctionality/addSongResponse")]
        bool addSong(webSIte.TrackServiceReference.SongClass song);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/addSong", ReplyAction="http://tempuri.org/ISongsFunctionality/addSongResponse")]
        System.Threading.Tasks.Task<bool> addSongAsync(webSIte.TrackServiceReference.SongClass song);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/removeSong", ReplyAction="http://tempuri.org/ISongsFunctionality/removeSongResponse")]
        bool removeSong(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/removeSong", ReplyAction="http://tempuri.org/ISongsFunctionality/removeSongResponse")]
        System.Threading.Tasks.Task<bool> removeSongAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/addAlbum", ReplyAction="http://tempuri.org/ISongsFunctionality/addAlbumResponse")]
        bool addAlbum(webSIte.TrackServiceReference.SongClass[] album);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/addAlbum", ReplyAction="http://tempuri.org/ISongsFunctionality/addAlbumResponse")]
        System.Threading.Tasks.Task<bool> addAlbumAsync(webSIte.TrackServiceReference.SongClass[] album);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/GetSong", ReplyAction="http://tempuri.org/ISongsFunctionality/GetSongResponse")]
        webSIte.TrackServiceReference.SongClass GetSong(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/GetSong", ReplyAction="http://tempuri.org/ISongsFunctionality/GetSongResponse")]
        System.Threading.Tasks.Task<webSIte.TrackServiceReference.SongClass> GetSongAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/getAllSongs", ReplyAction="http://tempuri.org/ISongsFunctionality/getAllSongsResponse")]
        webSIte.TrackServiceReference.SongClass[] getAllSongs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/getAllSongs", ReplyAction="http://tempuri.org/ISongsFunctionality/getAllSongsResponse")]
        System.Threading.Tasks.Task<webSIte.TrackServiceReference.SongClass[]> getAllSongsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/getSongsByGenre", ReplyAction="http://tempuri.org/ISongsFunctionality/getSongsByGenreResponse")]
        webSIte.TrackServiceReference.SongClass[] getSongsByGenre(string genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/getSongsByGenre", ReplyAction="http://tempuri.org/ISongsFunctionality/getSongsByGenreResponse")]
        System.Threading.Tasks.Task<webSIte.TrackServiceReference.SongClass[]> getSongsByGenreAsync(string genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/getSongsByAlbum", ReplyAction="http://tempuri.org/ISongsFunctionality/getSongsByAlbumResponse")]
        webSIte.TrackServiceReference.SongClass[] getSongsByAlbum();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISongsFunctionality/getSongsByAlbum", ReplyAction="http://tempuri.org/ISongsFunctionality/getSongsByAlbumResponse")]
        System.Threading.Tasks.Task<webSIte.TrackServiceReference.SongClass[]> getSongsByAlbumAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISongsFunctionalityChannel : webSIte.TrackServiceReference.ISongsFunctionality, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SongsFunctionalityClient : System.ServiceModel.ClientBase<webSIte.TrackServiceReference.ISongsFunctionality>, webSIte.TrackServiceReference.ISongsFunctionality {
        
        public SongsFunctionalityClient() {
        }
        
        public SongsFunctionalityClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SongsFunctionalityClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SongsFunctionalityClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SongsFunctionalityClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool addSong(webSIte.TrackServiceReference.SongClass song) {
            return base.Channel.addSong(song);
        }
        
        public System.Threading.Tasks.Task<bool> addSongAsync(webSIte.TrackServiceReference.SongClass song) {
            return base.Channel.addSongAsync(song);
        }
        
        public bool removeSong(int Id) {
            return base.Channel.removeSong(Id);
        }
        
        public System.Threading.Tasks.Task<bool> removeSongAsync(int Id) {
            return base.Channel.removeSongAsync(Id);
        }
        
        public bool addAlbum(webSIte.TrackServiceReference.SongClass[] album) {
            return base.Channel.addAlbum(album);
        }
        
        public System.Threading.Tasks.Task<bool> addAlbumAsync(webSIte.TrackServiceReference.SongClass[] album) {
            return base.Channel.addAlbumAsync(album);
        }
        
        public webSIte.TrackServiceReference.SongClass GetSong(int Id) {
            return base.Channel.GetSong(Id);
        }
        
        public System.Threading.Tasks.Task<webSIte.TrackServiceReference.SongClass> GetSongAsync(int Id) {
            return base.Channel.GetSongAsync(Id);
        }
        
        public webSIte.TrackServiceReference.SongClass[] getAllSongs() {
            return base.Channel.getAllSongs();
        }
        
        public System.Threading.Tasks.Task<webSIte.TrackServiceReference.SongClass[]> getAllSongsAsync() {
            return base.Channel.getAllSongsAsync();
        }
        
        public webSIte.TrackServiceReference.SongClass[] getSongsByGenre(string genre) {
            return base.Channel.getSongsByGenre(genre);
        }
        
        public System.Threading.Tasks.Task<webSIte.TrackServiceReference.SongClass[]> getSongsByGenreAsync(string genre) {
            return base.Channel.getSongsByGenreAsync(genre);
        }
        
        public webSIte.TrackServiceReference.SongClass[] getSongsByAlbum() {
            return base.Channel.getSongsByAlbum();
        }
        
        public System.Threading.Tasks.Task<webSIte.TrackServiceReference.SongClass[]> getSongsByAlbumAsync() {
            return base.Channel.getSongsByAlbumAsync();
        }
    }
}
